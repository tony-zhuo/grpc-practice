// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: protos/user/user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GetUserInfoServiceClient is the client API for GetUserInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetUserInfoServiceClient interface {
	GetUserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoResp, error)
}

type getUserInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGetUserInfoServiceClient(cc grpc.ClientConnInterface) GetUserInfoServiceClient {
	return &getUserInfoServiceClient{cc}
}

func (c *getUserInfoServiceClient) GetUserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoResp, error) {
	out := new(UserInfoResp)
	err := c.cc.Invoke(ctx, "/user.GetUserInfoService/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetUserInfoServiceServer is the server API for GetUserInfoService service.
// All implementations must embed UnimplementedGetUserInfoServiceServer
// for forward compatibility
type GetUserInfoServiceServer interface {
	GetUserInfo(context.Context, *UserInfoReq) (*UserInfoResp, error)
	mustEmbedUnimplementedGetUserInfoServiceServer()
}

// UnimplementedGetUserInfoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGetUserInfoServiceServer struct {
}

func (UnimplementedGetUserInfoServiceServer) GetUserInfo(context.Context, *UserInfoReq) (*UserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedGetUserInfoServiceServer) mustEmbedUnimplementedGetUserInfoServiceServer() {}

// UnsafeGetUserInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetUserInfoServiceServer will
// result in compilation errors.
type UnsafeGetUserInfoServiceServer interface {
	mustEmbedUnimplementedGetUserInfoServiceServer()
}

func RegisterGetUserInfoServiceServer(s grpc.ServiceRegistrar, srv GetUserInfoServiceServer) {
	s.RegisterService(&GetUserInfoService_ServiceDesc, srv)
}

func _GetUserInfoService_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetUserInfoServiceServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.GetUserInfoService/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetUserInfoServiceServer).GetUserInfo(ctx, req.(*UserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GetUserInfoService_ServiceDesc is the grpc.ServiceDesc for GetUserInfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetUserInfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.GetUserInfoService",
	HandlerType: (*GetUserInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserInfo",
			Handler:    _GetUserInfoService_GetUserInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/user/user.proto",
}
